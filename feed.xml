<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://abodeza.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://abodeza.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-14T14:13:46+00:00</updated><id>https://abodeza.github.io/feed.xml</id><title type="html">blank</title><subtitle>Things I wrote or would like to share </subtitle><entry><title type="html">Masking Plant Diseases [OpenCV]</title><link href="https://abodeza.github.io/blog/2025/masking-plant-diseases-opencv/" rel="alternate" type="text/html" title="Masking Plant Diseases [OpenCV]"/><published>2025-07-13T03:41:06+00:00</published><updated>2025-07-13T03:41:06+00:00</updated><id>https://abodeza.github.io/blog/2025/masking-plant-diseases-opencv</id><content type="html" xml:base="https://abodeza.github.io/blog/2025/masking-plant-diseases-opencv/"><![CDATA[<p>The jupyter notebook version of this post is found in my <a href="https://github.com/abodeza/plant_disease_detection">repo</a>.</p> <p>This post will walk through the process of masking five common leaf diseases. We’ll mainly be using openCV for handling the images and creating the masks.</p> <pre>import cv2<br />import numpy as npp<br />from matplotlib import pyplot as plt<br />import os<br /><br />HOME = os.getcwd()<br />print(&quot;HOME:&quot;, HOME)<br />test_path = os.path.join(HOME,&quot;test_imgs&quot;)</pre> <p>HOME: c:\Users\…\plant_disease_detection</p> <h3>We’re concerned with the following five diseases</h3> <ol><li>Powdery mildew</li><li>Burn</li><li>Spots</li><li>Rot</li><li>Chlorosis</li></ol> <pre># First let&#39;s load the images<br />mildew = cv2.imread(os.path.join(test_path, &quot;mildew.jpg&quot;))<br />aziz_burn = cv2.imread(os.path.join(test_path, &quot;Aziz_burn.jpg&quot;))<br />spot = cv2.imread(os.path.join(test_path, &quot;spot.jpg&quot;))<br />rot = cv2.imread(os.path.join(test_path, &quot;rot.jpg&quot;))<br />c1 = cv2.imread(os.path.join(test_path, &quot;c1.jpeg&quot;))<br /><br /># It&#39;s much easier to apply color masks in HSV<br />hsv_mildew = cv2.cvtColor(mildew, cv2.COLOR_BGR2HSV)<br />hsv_aziz_burn = cv2.cvtColor(aziz_burn, cv2.COLOR_BGR2HSV)<br />hsv_spot = cv2.cvtColor(spot, cv2.COLOR_BGR2HSV)<br />hsv_rot = cv2.cvtColor(rot, cv2.COLOR_BGR2HSV)<br />hsv_c1 = cv2.cvtColor(c1, cv2.COLOR_BGR2HSV)</pre> <h3>We’ll start by tackling the mildew</h3> <pre># We&#39;ll set the pixels with values in the range for green<br />leaf_mask = cv2.inRange(hsv_mildew, (25, 100, 70), (65, 255, 255))<br />mildew_rgb = cv2.cvtColor(mildew, cv2.COLOR_BGR2RGB)<br /><br />fig, axes = plt.subplots(1, 3, figsize=(20, 20))<br />axes[0].imshow(mildew_rgb)<br />axes[0].axis(‘off’)<br />axes[0].set_title(“Original Image (mildew on leaf)”)<br /><br />axes[1].imshow(leaf_mask, cmap=’gray’)<br />axes[1].axis(‘off’)<br />axes[1].set_title(“Leaf mask”)<br /><br />axes[2].imshow(cv2.bitwise_and(mildew_rgb, mildew_rgb, mask=leaf_mask))<br />axes[2].axis(‘off’)<br />axes[2].set_title(“Only green leaves”)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*CF3ojLxyXv4FuhRF7HNZRw.png"/></figure> <h3>The leaf mask adequately detects the leaf but to find the powdery mildew that lies within it, we need need a connected region of the leaf. Thus, let’s return the outermost contour of the leaf.</h3> <pre># Create a black 1-channel image to draw on<br />leaf = np.zeros(leaf_mask.shape, dtype=np.uint8)<br />contours, _ = cv2.findContours(leaf_mask, cv2.RETR_EXTERNAL,\<br />     cv2.CHAIN_APPROX_SIMPLE)<br /><br /># Draw contours on the black image<br />cv2.drawContours(leaf, contours, -1, 255, cv2.FILLED)<br /><br /># Display<br />plt.imshow(leaf, cmap=’gray’)<br />plt.axis(‘off’)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/389/1*_iFiXj5pLZvqPQVhnMfwVg.png"/></figure> <h3>Now we find the mildew lying within it</h3> <pre>white_mask = cv2.inRange(hsv_mildew, (0, 0, 180), (180, 60, 255))<br />white_mask = cv2.bitwise_and(leaf, leaf, mask=white_mask)<br /><br /># Morphing the mildew mask to get connected region of mildew<br />kernel = np.ones((9, 9), np.uint8)<br />morphed_mask = cv2.morphologyEx(white_mask, cv2.MORPH_CLOSE, kernel)<br /><br />plt.imshow(white_mask, cmap=’gray’)<br />plt.axis(‘off’)<br />plt.title(“Mildew mask within leaf”)<br />plt.show()<br /><br />plt.imshow(morphed_mask, cmap=’gray’)<br />plt.axis(‘off’)<br />plt.title(“Morphed mildew mask within leaf”)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/389/1*Uj6OI81YjTvHVAGY9HzZbg.png"/></figure> <figure><img alt="" src="https://cdn-images-1.medium.com/max/389/1*ygx9UxuZpJc6otqK2rKD1Q.png"/></figure> <h3>Now we’ll tackle burns on leaves</h3> <p>Simply a brownish color mask is sufficient given appropraite photo conditions.</p> <p>*<strong>Image credit to my colleague Abdulaziz Alfrayan</strong></p> <pre>burn_mask = cv2.inRange(hsv_aziz_burn, (10,100,10), (20, 255, 200))<br />burn_rgb = cv2.cvtColor(aziz_burn, cv2.COLOR_BGR2RGB)<br /><br /># Testing a more sophistcated morphology — it’s better! <br /># less rough edges and more organic<br />kh, kw = [max(9, int(round(min(hsv_aziz_burn.shape[:2]) * 0.01))) | 1]*2<br />kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kh, kw))<br />burn_mask = cv2.morphologyEx(burn_mask, cv2.MORPH_CLOSE, kernel)<br />burn_mask = cv2.morphologyEx(burn_mask, cv2.MORPH_OPEN, kernel)<br /><br />fig, axes = plt.subplots(1, 3, figsize=(20, 20))<br /><br />axes[0].imshow(burn_rgb)<br />axes[0].axis(‘off’)<br />axes[0].set_title(“Original Image (burnt leaf tips)”)<br /><br />axes[1].imshow(burn_mask, cmap=’gray’)<br />axes[1].axis(‘off’)<br />axes[1].set_title(“Leaf mask”)<br /><br />axes[2].imshow(cv2.bitwise_and(burn_rgb, burn_rgb, mask=burn_mask))<br />axes[2].axis(‘off’)<br />axes[2].set_title(“Only burnt parts”)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zO9EURAjMgsEpK82duvkmA.png"/></figure> <h3>Now it’s time for spots, which are usually caused by fungi or bacteria</h3> <p>The spots typically occur within the leaf, so we’ll use our handy leaf mask</p> <pre>leaf_mask2 = cv2.inRange(hsv_spot, (25, 100, 70), (65, 255, 255))<br />leaf2 = np.zeros(leaf_mask2.shape, dtype=np.uint8)<br />spot_rgb = cv2.cvtColor(spot, cv2.COLOR_BGR2RGB)<br />contours2, _ = cv2.findContours(leaf_mask2, cv2.RETR_EXTERNAL,\<br />     cv2.CHAIN_APPROX_SIMPLE)<br /><br /># Draw contours on the black image<br />cv2.drawContours(leaf2, contours2, -1, 255, cv2.FILLED)<br />spot_mask = cv2.inRange(hsv_spot, (10,100,10), (20, 255, 200))<br />spot_mask = cv2.bitwise_and(leaf2, leaf2, mask=spot_mask)<br /><br /># The rectangular 9x9 kernal appeard to perform better on smaller <br /># patches of disease<br />kernel = np.ones((9, 9), np.uint8)<br />morphed_mask2 = cv2.morphologyEx(spot_mask, cv2.MORPH_CLOSE, kernel)<br /><br />fig, axes = plt.subplots(1, 3, figsize=(20, 20))<br />axes[0].imshow(spot_rgb)<br />axes[0].axis(&#39;off&#39;)<br />axes[0].set_title(&quot;Original Image (spots on leaf)&quot;)<br /><br />axes[1].imshow(morphed_mask2, cmap=&#39;gray&#39;)<br />axes[1].axis(&#39;off&#39;)<br />axes[1].set_title(&quot;Spot mask&quot;)<br /><br />axes[2].imshow(cv2.bitwise_and(spot_rgb, spot_rgb, mask=morphed_mask2))<br />axes[2].axis(&#39;off&#39;)<br />axes[2].set_title(&quot;Only spots&quot;)<br />plt.show()</pre> <p>Due to the image quality of most spot training data and the porosity of the leaves, it’s not possible to get a perfect mask. This mask however still provides adequate results.</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hZUqG-YcNE287tAdX6tJkQ.png"/></figure> <h3>Now we get to foliage rot</h3> <pre># Slightly adjusted range to fit the rotten leaf color<br />leaf_mask3 = cv2.inRange(hsv_rot, (25, 50, 70), (95, 255, 255)) <br />leaf3 = np.zeros(leaf_mask3.shape, dtype=np.uint8)<br />contours3, _ = cv2.findContours(leaf_mask3, cv2.RETR_EXTERNAL,\<br />     cv2.CHAIN_APPROX_SIMPLE)<br /><br />rot_rgb = cv2.cvtColor(rot, cv2.COLOR_BGR2RGB)<br /><br /><br /># Draw contours on the black image<br />cv2.drawContours(leaf3, contours3, -1, 255, cv2.FILLED)<br />rot_mask1 = cv2.inRange(hsv_rot, (5,10,20), (60,120,100))<br />rot_mask2 = cv2.inRange(hsv_rot, (10,100,10), (20, 255, 200))<br />rot_mask = cv2.bitwise_or(rot_mask1, rot_mask2)<br />rot_mask = cv2.bitwise_and(leaf3, leaf3, mask=rot_mask)<br /><br />kh, kw = [max(9, int(round(min(hsv_aziz_burn.shape[:2]) * 0.01))) | 1]*2<br />kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kh, kw))<br />rot_mask = cv2.morphologyEx(rot_mask, cv2.MORPH_CLOSE, kernel)<br />rot_mask = cv2.morphologyEx(rot_mask, cv2.MORPH_OPEN, kernel)<br /><br />fig, axes = plt.subplots(1, 3, figsize=(20, 20))<br /><br />axes[0].imshow(rot_rgb)<br />axes[0].axis(&#39;off&#39;)<br />axes[0].set_title(&quot;Original Image (rot on leaf)&quot;)<br /><br />axes[1].imshow(leaf3, cmap=&#39;gray&#39;)<br />axes[1].axis(&#39;off&#39;)<br />axes[1].set_title(&quot;Rot mask&quot;)<br /><br />axes[2].imshow(cv2.bitwise_and(rot_rgb, rot_rgb, mask=rot_mask))<br />axes[2].axis(&#39;off&#39;)<br />axes[2].set_title(&quot;Only rotten parts&quot;)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KZ9LhdPKmquXlK0XAYCGtA.png"/></figure> <h3>Masking chlorosis/yellowing (nutrient deficiency)</h3> <pre>chlorosis_mask = cv2.inRange(hsv_c1, (20, 150, 150), (37, 255, 255))<br />c1_rgb = cv2.cvtColor(c1, cv2.COLOR_BGR2RGB)<br /><br />kh, kw = [max(9, int(round(min(c1.shape[:2]) * 0.01))) | 1]*2<br />kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kh, kw))<br />chlorosis_mask = cv2.morphologyEx(chlorosis_mask, cv2.MORPH_CLOSE, kernel)<br />chlorosis_mask = cv2.morphologyEx(chlorosis_mask, cv2.MORPH_OPEN, kernel)<br /><br />fig, axes = plt.subplots(1, 3, figsize=(20, 20))<br /><br />axes[0].imshow(c1_rgb)<br />axes[0].axis(&#39;off&#39;)<br />axes[0].set_title(&quot;Original Image (Yellowing leaf)&quot;)<br /><br />axes[1].imshow(chlorosis_mask, cmap=&#39;gray&#39;)<br />axes[1].axis(&#39;off&#39;)<br />axes[1].set_title(&quot;Chlorosis mask&quot;)<br /><br />axes[2].imshow(cv2.bitwise_and(c1_rgb, c1_rgb, mask=chlorosis_mask))<br />axes[2].axis(&#39;off&#39;)<br />axes[2].set_title(&quot;Only yellow parts&quot;)<br />plt.show()</pre> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SRMA_PzbxnaXl-GZV7f2pg.png"/></figure> <h3>Final pipeline for disease masking</h3> <pre>def color_mask(img_path):<br />  img = cv2.imread(img_path) # Read the image<br /><br />  # Convert the color standard to HSV<br />  hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)<br /><br />  # Find the leaf<br />  leaf_mask = cv2.inRange(hsv, (25, 100, 70), (65, 255, 255))<br /><br />  # Create a black 1-channel image to draw on the leaf mask<br />  leaf = np.zeros(leaf_mask.shape, dtype=np.uint8)<br /><br />  # Get the outermost contour<br />  contours, _ = cv2.findContours(leaf_mask, cv2.RETR_EXTERNAL,\<br />       cv2.CHAIN_APPROX_SIMPLE)<br /><br />  # Draw contours on the black image<br />  cv2.drawContours(leaf, contours, -1, 255, cv2.FILLED)<br /><br />  # Construct the powdery mildew mask<br />  mildew_mask = cv2.inRange(hsv, (0, 0, 180), (180, 60, 255))<br /><br />  # Construct the spots mask<br />  spot_mask = cv2.inRange(hsv, (10,100,10), (20, 255, 200))<br /><br />  # Construct the rot mask<br />  rot_mask1 = cv2.inRange(hsv, (5,10,20), (60,120,100))<br />  rot_mask2 = cv2.inRange(hsv, (10,100,10), (20, 255, 200))<br />  rot_mask = cv2.bitwise_or(rot_mask1, rot_mask2)<br /><br />  # Combine the mildew, spot and rot masks then confine within the leaf<br />  # - others can appear on edges<br />  temp_mask = cv2.bitwise_or(mildew_mask, spot_mask)<br />  temp_mask = cv2.bitwise_or(temp_mask, rot_mask)<br />  temp_mask = cv2.bitwise_and(leaf, leaf, mask=temp_mask)<br /><br />  # Construct the burn mask_<br />  burn_mask = cv2.inRange(hsv, (10,100,10), (20, 255, 200))<br /><br />  # Construct the chlorosis mask_<br />  chlorosis_mask = cv2.inRange(hsv, (23, 50, 10), (35, 255, 255))<br /><br />  # Combine disease masks_<br />  disease_mask = cv2.bitwise_or(temp_mask, burn_mask)<br />  disease_mask = cv2.bitwise_or(disease_mask, chlorosis_mask)<br /><br />  # Smooth out edges and close gaps in mask_<br />  kh, kw = [max(9, int(round(min(img.shape[:2]) * 0.01))) | 1]*2<br />  kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (kh, kw))<br />  disease_mask = cv2.morphologyEx(disease_mask, cv2.MORPH_CLOSE, kernel)<br />  disease_mask = cv2.morphologyEx(disease_mask, cv2.MORPH_OPEN, kernel)<br /><br />  return disease_mask</pre> <h3>Helper functions</h3> <pre># Converting the standard HSV fields to opencv’s<br />def convert_hsv(h: int, s: int, v: int) -&gt; list[int]:<br />    return [round(h/2)] + [round((x/100) * 255) for x in [s, v]]</pre> <p>To inform our HSV based ranges of the colors related to the diseases commonly, we’ll run the following cell in a python script to use a mouse callback as a color picker from the training data I have. This will give me a ballpark guess on what colors I’m intrested in.</p> <pre>import cv2<br />import numpy as np_<br /><br /># Global variables to store the image and picked color_<br />img = cv2.imread(&quot;test_imgs/mildew.jpg&quot;)_<br />picked_color = np.array([0, 0, 0]) # Default to black (BGR)<br />hsv_color = np.array([0,0,0])<br /><br /># Mouse callback function_<br />def mouse_callback(event, x, y, flags, param):<br />    global picked_color, hsv_color, img<br /><br />    if event == cv2.EVENT_LBUTTONDOWN:<br />        # Get the BGR color of the pixel at (x, y)<br />        picked_color = img[y, x] # Returns a numpy array_<br />        hsv_color = cv2.cvtColor(np.uint8([[picked_color]]),\<br />           cv2.COLOR_BGR2HSV)[0][0]_<br />        print(&quot; - - - - - - - - - - &quot;)<br />        print(f&quot;Picked BGR color: {picked_color}&quot;)_<br />        print(f&quot;Picked HSV color: {hsv_color}&quot;)<br /><br />cv2.putText(img, &quot;Click to pick color&quot;, (100, 250), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)_<br /><br /># Create a window and set the mouse callback_<br />cv2.namedWindow(&quot;Color Picker&quot;)_<br />cv2.setMouseCallback(&quot;Color Picker&quot;, mouse_callback)<br /><br />while True:<br />    # Display the image<br />    display_img = img.copy()<br /><br />    # Display the picked color in a rectangle<br />    cv2.rectangle(display_img, (10, 10), (100, 50), picked_color.tolist(), -1)<br />    cv2.putText(display_img, f&quot;BGR: {picked_color[0]},{picked_color[1]},\<br />        {picked_color[2]}&quot;, (10, 80), cv2.FONT_HERSHEY_SIMPLEX, 0.6,<br />        (255, 255, 255), 1)<br />    cv2.putText(display_img, f&quot;HSV: {hsv_color[0]},{hsv_color[1]},<br />        {hsv_color[2]}&quot;, (10, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.6,<br />        (255, 255, 255), 1)<br />    cv2.imshow(&quot;Color Picker&quot;, display_img)<br /><br />    # Exit on &#39;q&#39; key press<br />    if cv2.waitKey(1) &amp; 0xFF == ord(&#39;q&#39;):<br />        break<br /><br />cv2.destroyAllWindows()</pre> <p>Thanks for reading!</p> <p>This was developed for the task of disease detection on plant leaves. You can find the rest of the project in the same repo mentioned at the start.</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6b43b7d8212f" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>